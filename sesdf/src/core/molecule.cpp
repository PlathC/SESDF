#include "bcs/core/molecule.hpp"

#include <array>

#include <glm/ext/vector_common.hpp>

namespace bcs
{
    constexpr std::array<float, static_cast<uint8_t>( SYMBOL::COUNT )> SYMBOL_VDW_RADIUS = {
        1.20f, // UNKNOWN	= 0,
        1.20f, // H			= 1,
        1.43f, // HE		= 2,
        2.12f, // LI		= 3,
        1.98f, // BE		= 4,
        1.91f, // B			= 5,
        1.77f, // C			= 6,
        1.66f, // N			= 7,
        1.50f, // O			= 8,
        1.46f, // F			= 9,
        1.58f, // NE		= 10,
        2.50f, // NA		= 11,
        2.51f, // MG		= 12,
        2.25f, // AL		= 13,
        2.19f, // SI		= 14,
        1.90f, // P			= 15,
        1.89f, // S			= 16,
        1.82f, // CL		= 17,
        1.83f, // AR		= 18,
        2.73f, // K			= 19,
        2.62f, // CA		= 20,
        2.58f, // SC		= 21,
        2.46f, // TI		= 22,
        2.42f, // V			= 23,
        2.45f, // CR		= 24,
        2.45f, // MN		= 25,
        2.44f, // FE		= 26,
        2.40f, // CO		= 27,
        2.40f, // NI		= 28,
        2.38f, // CU		= 29,
        2.39f, // ZN		= 30,
        2.32f, // GA		= 31,
        2.29f, // GE		= 32,
        1.88f, // AS		= 33,
        1.82f, // SE		= 34,
        1.86f, // BR		= 35,
        2.25f, // KR		= 36,
        3.21f, // RB		= 37,
        2.84f, // SR		= 38,
        2.75f, // Y			= 39,
        2.52f, // ZR		= 40,
        2.56f, // NB		= 41,
        2.45f, // MO		= 42,
        2.44f, // TC		= 43,
        2.46f, // RU		= 44,
        2.44f, // RH		= 45,
        2.15f, // PD		= 46,
        2.53f, // AG		= 47,
        2.49f, // CD		= 48,
        2.43f, // IN		= 49,
        2.42f, // SN		= 50,
        2.47f, // SB		= 51,
        1.99f, // TE		= 52,
        2.04f, // I			= 53,
        2.06f, // XE		= 54,
        3.48f, // CS		= 55,
        3.03f, // BA		= 56,
        2.98f, // LA		= 57,
        2.88f, // CE		= 58,
        2.92f, // PR		= 59,
        2.95f, // ND		= 60,
        0.00f, // PM		= 61,
        2.90f, // SM		= 62,
        2.87f, // EU		= 63,
        2.83f, // GD		= 64,
        2.79f, // TB		= 65,
        2.87f, // DY		= 66,
        2.81f, // HO		= 67,
        2.83f, // ER		= 68,
        2.79f, // TM		= 69,
        2.80f, // YB		= 70,
        2.74f, // LU		= 71,
        2.63f, // HF		= 72,
        2.53f, // TA		= 73,
        2.57f, // W			= 74,
        2.49f, // RE		= 75,
        2.48f, // OS		= 76,
        2.41f, // IR		= 77,
        2.29f, // PT		= 78,
        2.32f, // AU		= 79,
        2.45f, // HG		= 80,
        2.47f, // TL		= 81,
        2.60f, // PB		= 82,
        2.54f, // BI		= 83,
        0.00f, // PO		= 84,
        0.00f, // AT		= 85,
        0.00f, // RN		= 86,
        0.00f, // FR		= 87,
        0.00f, // RA		= 88,
        2.80f, // AC		= 89,
        2.93f, // TH		= 90,
        2.88f, // PA		= 91,
        2.71f, // U			= 92,
        2.82f, // NP		= 93,
        2.81f, // PU		= 94,
        2.83f, // AM		= 95,
        3.05f, // CM		= 96,
        3.40f, // BK		= 97,
        3.05f, // CF		= 98,
        2.70f, // ES		= 99,
        0.00f, // FM		= 100,
        0.00f, // MD		= 101,
        0.00f, // NO		= 102,
        0.00f, // LR		= 103,
        0.00f, // RF		= 104,
        0.00f, // DD		= 105,
        0.00f, // SG		= 106,
        0.00f, // BHJ		= 107,
        0.00f, // HS		= 108,
        0.00f, // MT		= 109,
        0.00f, // DS		= 110,
        0.00f, // RG		= 111,
        0.00f, // UUB		= 112,
        0.00f, // UUT		= 113,
        0.00f, // UUQ		= 114,
        0.00f, // UUP		= 115,
        0.00f, // UUH		= 116,
        0.00f, // UUS		= 117,
        0.00f  // UUO		= 118,
    };

    float getRadius( SYMBOL symbol ) { return SYMBOL_VDW_RADIUS[ static_cast<uint8_t>( symbol ) ]; }
    Aabb  getAabb( ConstSpan<Vec4f> molecule )
    {
        Aabb result { Vec3f( std::numeric_limits<float>::max() ), Vec3f( std::numeric_limits<float>::lowest() ) };
        for ( std::size_t i = 0; i < molecule.size; i++ )
        {
            const Vec4f & atom = molecule.ptr[ i ];
            result.min         = glm::min( Vec3f( atom ) - atom.w, result.min );
            result.max         = glm::max( Vec3f( atom ) + atom.w, result.max );
        }

        return result;
    }

} // namespace bcs
